package softwareengineering.rotmilan;

import java.util.ArrayList;

import softwareengineering.Direction;
import softwareengineering.Game;
import softwareengineering.Move;
import softwareengineering.Player;

//Enumeration um GameObjects zu unterscheiden
enum Objecttype {
	STONE, GOAL;
}

public class Rotmilan implements Player{

	int color;
	int playernumber;
	int goal_row, goal_column;
	int gameRows, gameColumns;
	int movesSkipped;
	int[][] board_int;
	String name;
	Game game;
	GameObject ourGoal;
	ArrayList<GameObject> ourStones;
	ArrayList<GameObject> enemyStones;
	ArrayList<Node> enemyGoals;

	AStarAlgorithm astar = null;
	
	ArrayList<int[][]> boards = null;

	Strategy strategy = null;

	public Rotmilan(int color, String name, Game game) {

		this.color = color;
		this.name = name;
		this.game = game;
		gameRows = game.getNumRows();
		gameColumns = game.getNumColumns();
		board_int = new int[gameRows][gameColumns];
		movesSkipped = 0;
		ourStones = new ArrayList<GameObject>();
		enemyStones = new ArrayList<GameObject>();
		enemyGoals = new ArrayList<Node>();

		astar = new AStarAlgorithm();
		
		boards = new ArrayList<>();

		//boardIntEinlesen();
		//parseBoardToObjectBoard();
	}

	public String toString() {
		return name;
	}

	public int getColor() {
		return color;
	}


	public void boardIntEinlesen() {
		for (int row = 0; row < gameRows; row++) {
			for (int column = 0; column < gameColumns; column++) {
				board_int[row][column] = game.getField(row, column);
			}
		}
	}

	// integer board auf Object boards mit Gegner und eigene Steine
	public void parseBoardToObjectBoard() {
		this.ourStones = new ArrayList<GameObject>();
		enemyStones = new ArrayList<GameObject>();

		for (int row = 0; row < gameRows; row++) {
			for (int column = 0; column < gameColumns; column++) {

				// unser Ziel
				if (board_int[row][column] == -color) {
					ourGoal = new GameObject(row, column, color, Objecttype.GOAL);
					goal_row = ourGoal.getRow();
					goal_column = ourGoal.getColumn();
					ourStones.add(ourGoal);
				}
				// unser Stein
				else if (board_int[row][column] == color) {
					ourStones.add(new GameObject(row, column, color, Objecttype.STONE));
				}
				// Gegner Stein
				else if (board_int[row][column] > 0) {
					enemyStones.add(new GameObject(row, column, board_int[row][column], Objecttype.STONE));
				}
				// Gegner Tor
				else if (board_int[row][column] < 0) {
					enemyStones.add(new GameObject(row, column, -(board_int[row][column]), Objecttype.GOAL));
					enemyGoals.add(new Node(row, column, false));
				}
			}
		}
	}



	public Move nextMove() {

		//DefaultStrategy defS = new DefaultStrategy();
		StoneChoice stoneChoice = new StoneChoice();
		Pathfinder pathf = new Pathfinder();

		
		
		int skippedTurns = 0;

		ArrayList<Node> list = new ArrayList<>();
		ArrayList<GameObject> listWithoutGoal = new ArrayList<>();

		this.boardIntEinlesen();
		this.parseBoardToObjectBoard();

		for(int i = 0; i < ourStones.size(); i++) {

			if(! (ourStones.get(i).getColumn() == ourGoal.getColumn() && ourStones.get(i).getRow() == ourGoal.getRow())) {
				listWithoutGoal.add(ourStones.get(i));
			}
		}
		for(int i = 0; i < listWithoutGoal.size(); i++) {

			Node n1 = new Node(listWithoutGoal.get(i).getRow(), listWithoutGoal.get(i).getColumn(), true, null);
			list.add(n1);
		}

		Node goalNode = new Node(goal_row, goal_column, false,  null);
		
		//Hier wird die Strategie bestimmt
		Strategy defS = new DefaultStrategy(board_int, gameRows, gameColumns, goalNode, list, enemyStones, color );
		Strategy defDW = new DWStrategy(board_int, gameRows, gameColumns, goalNode, list, enemyStones, color, game, boards);
		
		//analyser muss f체r BlocktorStrategy ueberpruefen, ob es mehrere Tore oder nur ein Tor gibt, da sich dann der Konstruktor 채ndert.
		//Zudem sollte nicht immer ein neues Stratiegie Objekt erstellt werden, sondern das alte wiederverwendet -> SIngleton
		
		//strategy = new BlockTorStrategy(board_int, gameRows, gameColumns, color, enemyGoals, list);
		//Analyse wird gestartet
		//int situation = defS.analyze();
		int situation = 0;
		
		//switch case f체r die einzelnen Strategien je nach Situation
		switch(situation) {
			case 0: return defDW.getMove();
			default : return defS.getMove();
		}
		//Strategie gibt move zur체ck

		/*
		//========== Vorgehen zum bestimmen der Direction ==========
		//1. Stein bestimmen:
		nodeToMove = stoneChoice.chooseStoneToMove(endNode, list, board_int, gameRows, gameColumns, color);
		 */

		/*
		Node goalNode = new Node(this.goal_row, this.goal_column, false, null);	//goal
		Node nodeToMove = null;	//welcher Stein soll whin bewegt werden
		Node endNode = null;	//wohin soll der Stein bewegt werden
		Path shortestPath = null;	//pfad zu berechnen
		Direction direction = null;	//direction

		//Stein bestimmen
		Node ToMove = defS.chooseStoneToMove(endNode, list, board_int, gameRows, gameColumns, color);
		
		//2: Pfad von Start zu Ziel bestimmen
		shortestPath = astar.findShortestPath(nodeToMove, endNode, board_int, gameRows, gameColumns, color);
		//3. Path der Node zuweisen
		nodeToMove.setPath(shortestPath);
		//4. Queue sortieren
		nodeToMove.getPath().sortNodesToQueue(nodeToMove.getRowNumber(), nodeToMove.getColumnNumber() );
		//5. Direction bekommen
		direction = nodeToMove.getNextDirectionByQueue();

		Move move = null;

		//Abfrage ob direction 0 ist
		if(direction == null) {
			return move;
		}

		move = new Move(nodeToMove.getRowNumber(), nodeToMove.getColumnNumber(), direction);
		*/
		//return move;

	}



}
